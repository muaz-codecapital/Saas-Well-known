<?php

namespace App\Http\Controllers;

use App\Models\GoogleAccount;
use App\Models\Event;
use App\Services\GoogleCalendarService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;

class GoogleCalendarController extends Controller
{
    protected GoogleCalendarService $googleCalendarService;

    public function __construct(GoogleCalendarService $googleCalendarService)
    {
        $this->googleCalendarService = $googleCalendarService;
    }

    /**
     * Redirect to Google OAuth for calendar access.
     */
    public function redirectToGoogle()
    {
        // Check if user is authenticated
        if (!Auth::check()) {
            return redirect()->route('login')->with('warning', 'Please log in to connect your Google Calendar.');
        }

        try {
            // Clear any existing Google account for this user to force fresh OAuth
            $user = Auth::user();
            GoogleAccount::where('user_id', $user->id)->delete();
            Log::info("Cleared existing Google account for user {$user->id} to force fresh OAuth");

            $client = $this->googleCalendarService->getClient();

            // Set the redirect URI to match the callback route
            $client->setRedirectUri(route('google.callback'));

            // Generate the authorization URL
            $authUrl = $client->createAuthUrl();

            // Ensure auth URL is a string
            if (is_array($authUrl)) {
                Log::error('Google OAuth auth URL is an array: ' . json_encode($authUrl));
                throw new \Exception('Invalid auth URL generated by Google Client');
            }

            Log::info('Google OAuth redirect initiated successfully');

            return redirect($authUrl);
        } catch (\Exception $e) {
            Log::error('Google OAuth redirect failed: ' . $e->getMessage());
            Log::error('Exception details: ' . json_encode([
                'message' => $e->getMessage(),
                'file' => $e->getFile(),
                'line' => $e->getLine(),
                'trace' => $e->getTraceAsString()
            ]));

            return redirect()->back()->with('error', 'Failed to connect to Google Calendar. Please check your Google OAuth configuration.');
        }
    }

    /**
     * Handle Google OAuth callback and store tokens.
     */
    public function handleGoogleCallback(Request $request)
    {
        // Check if user is authenticated
        if (!Auth::check()) {
            return redirect()->route('login');
        }

        try {
            if (!$request->has('code')) {
                Log::error('Google OAuth callback missing authorization code');
                return redirect()->route('calendar')->with('error', 'Authorization failed. Please try again.');
            }

            $user = Auth::user();

            // Get authenticated Google client
            $client = $this->googleCalendarService->getClient();

            // Exchange authorization code for access token
            $token = $client->fetchAccessTokenWithAuthCode($request->get('code'));

            Log::info('Google OAuth token received', [
                'has_access_token' => isset($token['access_token']),
                'has_refresh_token' => isset($token['refresh_token']),
                'expires_in' => $token['expires_in'] ?? 'not_set',
                'token_keys' => array_keys($token)
            ]);

            if (isset($token['error'])) {
                Log::error('Google OAuth token exchange failed: ' . $token['error']);
                return redirect()->route('calendar')->with('error', 'Failed to get access token from Google.');
            }

            // Set the access token on the client
            $client->setAccessToken($token);
            
            Log::info('Access token set on client', [
                'client_has_token' => $client->getAccessToken() ? 'yes' : 'no',
                'token_expired' => $client->isAccessTokenExpired() ? 'yes' : 'no'
            ]);

            // Get user profile information
            try {
                $oauth2 = new \Google\Service\Oauth2($client);
                $userInfo = $oauth2->userinfo->get();
                $userEmail = $userInfo->email;
                Log::info("Google OAuth successful for user {$user->id}, email: {$userEmail}");
            } catch (\Exception $e) {
                Log::error('Failed to get user info from OAuth2 service: ' . $e->getMessage());
                // Fallback: try to get email from token or use a default
                $userEmail = $token['email'] ?? 'unknown@example.com';
                Log::info("Using fallback email for user {$user->id}: {$userEmail}");
            }

            // Store or update Google account information
            $googleAccount = GoogleAccount::updateOrCreate(
                ['user_id' => $user->id],
                [
                    'access_token' => $token['access_token'],
                    'refresh_token' => $token['refresh_token'] ?? null,
                    'expires_in' => $token['expires_in'] ?? 3600,
                    'token_created_at' => now(),
                    'google_account_email' => $userEmail,
                    'is_connected' => true,
                ]
            );

            Log::info("Google Calendar connected for user {$user->id}, Google Account ID: {$googleAccount->id}");

            return redirect()->route('calendar')->with('success', 'Google Calendar connected successfully!');
        } catch (\Exception $e) {
            Log::error('Google OAuth callback failed: ' . $e->getMessage());

            return redirect()->route('calendar')->with('error', 'Failed to connect Google Calendar. Please try again.');
        }
    }

    /**
     * Disconnect Google Calendar.
     */
    public function disconnect()
    {
        // Check if user is authenticated
        if (!Auth::check()) {
            return redirect()->route('login');
        }

        try {
            $user = Auth::user();

            $googleAccount = GoogleAccount::where('user_id', $user->id)->first();

            if ($googleAccount) {
                $googleAccount->disconnect();
                Log::info("Google Calendar disconnected for user {$user->id}");
            }

            return redirect()->route('calendar')->with('success', 'Google Calendar disconnected successfully!');
        } catch (\Exception $e) {
            Log::error('Google Calendar disconnect failed: ' . $e->getMessage());

            return redirect()->route('calendar')->with('error', 'Failed to disconnect Google Calendar. Please try again.');
        }
    }

    /**
     * Trigger manual sync from Google Calendar.
     */
    public function sync(Request $request)
    {
        // Check if user is authenticated
        if (!Auth::check()) {
            return response()->json(['success' => false, 'message' => 'Please log in first.'], 401);
        }

        try {
            $user = Auth::user();

            // Check if user has connected Google account
            $googleAccount = GoogleAccount::where('user_id', $user->id)
                ->where('is_connected', true)
                ->first();

            if (!$googleAccount) {
                return response()->json([
                    'success' => false,
                    'message' => 'Google Calendar not connected. Please connect first.'
                ], 400);
            }

            // Sync events from Google Calendar
            $syncedEvents = $this->googleCalendarService->syncFromGoogle($user);

            if ($syncedEvents > 0) {
                $message = "Calendar synced successfully! {$syncedEvents} new event" . ($syncedEvents === 1 ? '' : 's') . " imported.";
            } else {
                $message = "Calendar synced successfully! No new events found.";
            }

            return response()->json([
                'success' => true,
                'message' => $message,
                'events_count' => $syncedEvents
            ]);
        } catch (\Exception $e) {
            Log::error('Google Calendar sync failed: ' . $e->getMessage());

            return response()->json([
                'success' => false,
                'message' => 'Sync failed. Please try again.'
            ], 500);
        }
    }
}
